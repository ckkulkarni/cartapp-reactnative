a3357c25791fa3e4a4e114598ce6ee81
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FontDisplay", {
  enumerable: true,
  get: function get() {
    return _Font.FontDisplay;
  }
});
exports.isLoaded = isLoaded;
exports.isLoading = isLoading;
exports.loadAsync = loadAsync;
exports.processFontFamily = processFontFamily;
exports.unloadAllAsync = unloadAllAsync;
exports.unloadAsync = unloadAsync;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _expoModulesCore = require("expo-modules-core");
var _ExpoFontLoader = _interopRequireDefault(require("./ExpoFontLoader"));
var _Font = require("./Font.types");
var _FontLoader = require("./FontLoader");
var loaded = {};
var loadPromises = {};
function processFontFamily(fontFamily) {
  if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {
    return fontFamily;
  }
  if (!isLoaded(fontFamily)) {
    if (__DEV__) {
      if (isLoading(fontFamily)) {
        console.error(`You started loading the font "${fontFamily}", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);
      } else {
        console.error(`fontFamily "${fontFamily}" is not a system font and has not been loaded through Font.loadAsync.\n
- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\n
- If this is a custom font, be sure to load it with Font.loadAsync.`);
      }
    }
    return 'System';
  }
  return `ExpoFont-${(0, _FontLoader.getNativeFontName)(fontFamily)}`;
}
function isLoaded(fontFamily) {
  return fontFamily in loaded;
}
function isLoading(fontFamily) {
  return fontFamily in loadPromises;
}
function loadAsync(_x, _x2) {
  return _loadAsync.apply(this, arguments);
}
function _loadAsync() {
  _loadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, source) {
    if (typeof fontFamilyOrFontMap === 'object') {
      if (source) {
        throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \`loadAsync()\` can only be used with a \`string\` value as the first argument.`);
      }
      var fontMap = fontFamilyOrFontMap;
      var names = Object.keys(fontMap);
      yield Promise.all(names.map(function (name) {
        return loadFontInNamespaceAsync(name, fontMap[name]);
      }));
      return;
    }
    return yield loadFontInNamespaceAsync(fontFamilyOrFontMap, source);
  });
  return _loadAsync.apply(this, arguments);
}
function loadFontInNamespaceAsync(_x3, _x4) {
  return _loadFontInNamespaceAsync.apply(this, arguments);
}
function _loadFontInNamespaceAsync() {
  _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {
    if (!source) {
      throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { "${fontFamily}": ${source} }. Expected asset of type \`FontSource\` for fontFamily of name: "${fontFamily}"`);
    }
    if (loaded[fontFamily]) {
      return;
    }
    if (loadPromises.hasOwnProperty(fontFamily)) {
      return loadPromises[fontFamily];
    }
    var asset = (0, _FontLoader.getAssetForSource)(source);
    loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {
      try {
        yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);
        loaded[fontFamily] = true;
      } finally {
        delete loadPromises[fontFamily];
      }
    })();
    yield loadPromises[fontFamily];
  });
  return _loadFontInNamespaceAsync.apply(this, arguments);
}
function unloadAllAsync() {
  return _unloadAllAsync.apply(this, arguments);
}
function _unloadAllAsync() {
  _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {
    if (!_ExpoFontLoader.default.unloadAllAsync) {
      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');
    }
    if (Object.keys(loadPromises).length) {
      throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);
    }
    for (var fontFamily of Object.keys(loaded)) {
      delete loaded[fontFamily];
    }
    yield _ExpoFontLoader.default.unloadAllAsync();
  });
  return _unloadAllAsync.apply(this, arguments);
}
function unloadAsync(_x5, _x6) {
  return _unloadAsync.apply(this, arguments);
}
function _unloadAsync() {
  _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {
    if (!_ExpoFontLoader.default.unloadAsync) {
      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');
    }
    if (typeof fontFamilyOrFontMap === 'object') {
      if (options) {
        throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \`unloadAsync()\` can only be used with a \`string\` value as the first argument.`);
      }
      var fontMap = fontFamilyOrFontMap;
      var names = Object.keys(fontMap);
      yield Promise.all(names.map(function (name) {
        return unloadFontInNamespaceAsync(name, fontMap[name]);
      }));
      return;
    }
    return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);
  });
  return _unloadAsync.apply(this, arguments);
}
function unloadFontInNamespaceAsync(_x7, _x8) {
  return _unloadFontInNamespaceAsync.apply(this, arguments);
}
function _unloadFontInNamespaceAsync() {
  _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {
    if (!loaded[fontFamily]) {
      return;
    } else {
      delete loaded[fontFamily];
    }
    var nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);
    if (!nativeFontName) {
      throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);
    }
    yield _ExpoFontLoader.default.unloadAsync(nativeFontName, options);
  });
  return _unloadFontInNamespaceAsync.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,