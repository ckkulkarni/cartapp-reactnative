9900f51db41fe60340fada89a751c06a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeIconAPI = exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;
exports.default = createIconSet;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ensureNativeModuleAvailable = _interopRequireDefault(require("./ensure-native-module-available"));
var _createIconSourceCache = _interopRequireDefault(require("./create-icon-source-cache"));
var _iconButton = _interopRequireDefault(require("./icon-button"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["name", "size", "color", "style", "children"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
exports.NativeIconAPI = NativeIconAPI;
var DEFAULT_ICON_SIZE = 12;
exports.DEFAULT_ICON_SIZE = DEFAULT_ICON_SIZE;
var DEFAULT_ICON_COLOR = 'black';
exports.DEFAULT_ICON_COLOR = DEFAULT_ICON_COLOR;
function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {
  var fontBasename = fontFile ? fontFile.replace(/\.(otf|ttf)$/, '') : fontFamily;
  var fontReference = _reactNative.Platform.select({
    windows: `/Assets/${fontFile}#${fontFamily}`,
    android: fontBasename,
    web: fontBasename,
    default: fontFamily
  });
  var Icon = function (_PureComponent) {
    (0, _inherits2.default)(Icon, _PureComponent);
    var _super = _createSuper(Icon);
    function Icon() {
      var _this;
      (0, _classCallCheck2.default)(this, Icon);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.root = null;
      _this.handleRef = function (ref) {
        _this.root = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(Icon, [{
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        if (this.root) {
          this.root.setNativeProps(nativeProps);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          name = _this$props.name,
          size = _this$props.size,
          color = _this$props.color,
          style = _this$props.style,
          children = _this$props.children,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var glyph = name ? glyphMap[name] || '?' : '';
        if (typeof glyph === 'number') {
          glyph = String.fromCodePoint(glyph);
        }
        var styleDefaults = {
          fontSize: size,
          color: color
        };
        var styleOverrides = {
          fontFamily: fontReference,
          fontWeight: 'normal',
          fontStyle: 'normal'
        };
        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
        props.ref = this.handleRef;
        return (0, _jsxRuntime.jsxs)(_reactNative.Text, _objectSpread(_objectSpread({
          selectable: false
        }, props), {}, {
          children: [glyph, children]
        }));
      }
    }]);
    return Icon;
  }(_react.PureComponent);
  Icon.defaultProps = {
    size: DEFAULT_ICON_SIZE,
    allowFontScaling: false
  };
  var imageSourceCache = (0, _createIconSourceCache.default)();
  function resolveGlyph(name) {
    var glyph = glyphMap[name] || '?';
    if (typeof glyph === 'number') {
      return String.fromCodePoint(glyph);
    }
    return glyph;
  }
  function getImageSourceSync(name) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
    (0, _ensureNativeModuleAvailable.default)();
    var glyph = resolveGlyph(name);
    var processedColor = (0, _reactNative.processColor)(color);
    var cacheKey = `${glyph}:${size}:${processedColor}`;
    if (imageSourceCache.has(cacheKey)) {
      return imageSourceCache.get(cacheKey);
    }
    try {
      var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);
      var value = {
        uri: imagePath,
        scale: _reactNative.PixelRatio.get()
      };
      imageSourceCache.setValue(cacheKey, value);
      return value;
    } catch (error) {
      imageSourceCache.setError(cacheKey, error);
      throw error;
    }
  }
  function getImageSource(_x) {
    return _getImageSource.apply(this, arguments);
  }
  function _getImageSource() {
    _getImageSource = (0, _asyncToGenerator2.default)(function* (name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      (0, _ensureNativeModuleAvailable.default)();
      var glyph = resolveGlyph(name);
      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = `${glyph}:${size}:${processedColor}`;
      if (imageSourceCache.has(cacheKey)) {
        return imageSourceCache.get(cacheKey);
      }
      try {
        var imagePath = yield NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);
        var value = {
          uri: imagePath,
          scale: _reactNative.PixelRatio.get()
        };
        imageSourceCache.setValue(cacheKey, value);
        return value;
      } catch (error) {
        imageSourceCache.setError(cacheKey, error);
        throw error;
      }
    });
    return _getImageSource.apply(this, arguments);
  }
  function loadFont() {
    return _loadFont.apply(this, arguments);
  }
  function _loadFont() {
    _loadFont = (0, _asyncToGenerator2.default)(function* () {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;
      if (_reactNative.Platform.OS === 'ios') {
        (0, _ensureNativeModuleAvailable.default)();
        if (!file) {
          throw new Error('Unable to load font, because no file was specified. ');
        }
        yield NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));
      }
    });
    return _loadFont.apply(this, arguments);
  }
  function hasIcon(name) {
    return Object.prototype.hasOwnProperty.call(glyphMap, name);
  }
  function getRawGlyphMap() {
    return glyphMap;
  }
  function getFontFamily() {
    return fontReference;
  }
  Icon.Button = (0, _iconButton.default)(Icon);
  Icon.getImageSource = getImageSource;
  Icon.getImageSourceSync = getImageSourceSync;
  Icon.loadFont = loadFont;
  Icon.hasIcon = hasIcon;
  Icon.getRawGlyphMap = getRawGlyphMap;
  Icon.getFontFamily = getFontFamily;
  return Icon;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,