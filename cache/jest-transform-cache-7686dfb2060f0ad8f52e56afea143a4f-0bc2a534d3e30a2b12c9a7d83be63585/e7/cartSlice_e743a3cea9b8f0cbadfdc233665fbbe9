81b37854947b37ee4e58d858a0b11ec8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetCounter = exports.removeItem = exports.removeAllItems = exports.increaseQuantity = exports.deleteItem = exports.default = exports.decreaseQuantity = exports.addNewItem = exports.addItem = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toolkit = require("@reduxjs/toolkit");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var initialItems = [{
  id: 1,
  quantity: 1
}, {
  id: 2,
  quantity: 1
}, {
  id: 3,
  quantity: 1
}, {
  id: 4,
  quantity: 1
}, {
  id: 5,
  quantity: 1
}];
var calculateTotalQuantity = function calculateTotalQuantity(items) {
  return items.reduce(function (total, item) {
    return total + item.quantity;
  }, 0);
};
var initialState = {
  items: initialItems,
  totalQuantity: calculateTotalQuantity(initialItems)
};
var cartSlice = (0, _toolkit.createSlice)({
  name: 'cart',
  initialState: initialState,
  reducers: {
    addItem: function addItem(state, action) {
      var existingItem = state.items.find(function (item) {
        return item.id === action.payload.id;
      });
      if (existingItem) {
        existingItem.quantity++;
        state.totalQuantity++;
      } else {
        state.items.push(_objectSpread(_objectSpread({}, action.payload), {}, {
          quantity: 1
        }));
        state.totalQuantity++;
      }
    },
    addNewItem: function addNewItem(state) {
      var uniqueIndex = state.items.reduce(function (maxIndex, item) {
        return Math.max(maxIndex, item.id);
      }, 0) + 1;
      state.items.push({
        id: uniqueIndex,
        quantity: 1
      });
      state.totalQuantity++;
    },
    removeItem: function removeItem(state, action) {
      var item = state.items.find(function (item) {
        return item.id === action.payload;
      });
      if (item && item.quantity > 0) {
        item.quantity--;
        state.totalQuantity--;
      }
    },
    increaseQuantity: function increaseQuantity(state, action) {
      var item = state.items.find(function (item) {
        return item.id === action.payload;
      });
      if (item) {
        item.quantity++;
        state.totalQuantity++;
      }
    },
    decreaseQuantity: function decreaseQuantity(state, action) {
      var item = state.items.find(function (item) {
        return item.id === action.payload;
      });
      if (item && item.quantity > 0) {
        item.quantity--;
        state.totalQuantity--;
      }
    },
    resetCounter: function resetCounter(state) {
      state.items.forEach(function (item) {
        state.totalQuantity -= item.quantity;
        item.quantity = 0;
      });
    },
    removeAllItems: function removeAllItems(state) {
      state.totalQuantity = 0;
      state.items = [];
    },
    deleteItem: function deleteItem(state, action) {
      var deletedItem = state.items.find(function (item) {
        return item.id === action.payload;
      });
      if (deletedItem) {
        state.totalQuantity -= deletedItem.quantity;
        state.items = state.items.filter(function (item) {
          return item.id !== action.payload;
        });
      }
    }
  }
});
var _cartSlice$actions = cartSlice.actions,
  addItem = _cartSlice$actions.addItem,
  removeItem = _cartSlice$actions.removeItem,
  increaseQuantity = _cartSlice$actions.increaseQuantity,
  decreaseQuantity = _cartSlice$actions.decreaseQuantity,
  resetCounter = _cartSlice$actions.resetCounter,
  removeAllItems = _cartSlice$actions.removeAllItems,
  deleteItem = _cartSlice$actions.deleteItem,
  addNewItem = _cartSlice$actions.addNewItem;
exports.addNewItem = addNewItem;
exports.deleteItem = deleteItem;
exports.removeAllItems = removeAllItems;
exports.resetCounter = resetCounter;
exports.decreaseQuantity = decreaseQuantity;
exports.increaseQuantity = increaseQuantity;
exports.removeItem = removeItem;
exports.addItem = addItem;
var _default = cartSlice.reducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,