2ca3f6f19a8461d9ac8b996f3178d004
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DEFAULT_ICON_COLOR", {
  enumerable: true,
  get: function get() {
    return _createIconSet.DEFAULT_ICON_COLOR;
  }
});
Object.defineProperty(exports, "DEFAULT_ICON_SIZE", {
  enumerable: true,
  get: function get() {
    return _createIconSet.DEFAULT_ICON_SIZE;
  }
});
exports.default = _default;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var Font = _interopRequireWildcard(require("expo-font"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _createIconSet = _interopRequireWildcard(require("./vendor/react-native-vector-icons/lib/create-icon-set"));
var _iconButton = _interopRequireDefault(require("./vendor/react-native-vector-icons/lib/icon-button"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _default(glyphMap, fontName, expoAssetId, fontStyle) {
  var _a;
  var font = (0, _defineProperty2.default)({}, fontName, expoAssetId);
  var RNVIconComponent = (0, _createIconSet.default)(glyphMap, fontName, null, fontStyle);
  return _a = function (_React$Component) {
    (0, _inherits2.default)(Icon, _React$Component);
    var _super = _createSuper(Icon);
    function Icon() {
      var _this;
      (0, _classCallCheck2.default)(this, Icon);
      _this = _super.apply(this, arguments);
      _this._mounted = false;
      _this.state = {
        fontIsLoaded: Font.isLoaded(fontName)
      };
      return _this;
    }
    (0, _createClass2.default)(Icon, [{
      key: "componentDidMount",
      value: function () {
        var _componentDidMount = (0, _asyncToGenerator2.default)(function* () {
          this._mounted = true;
          if (!this.state.fontIsLoaded) {
            yield Font.loadAsync(font);
            this._mounted && this.setState({
              fontIsLoaded: true
            });
          }
        });
        function componentDidMount() {
          return _componentDidMount.apply(this, arguments);
        }
        return componentDidMount;
      }()
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._icon) {
          this._icon.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {
          console.warn(`"${this.props.name}" is not a valid icon name for family "${fontName}"`);
        }
        if (!this.state.fontIsLoaded) {
          return (0, _jsxRuntime.jsx)(_reactNative.Text, {});
        }
        return (0, _jsxRuntime.jsx)(RNVIconComponent, _objectSpread({
          ref: function ref(view) {
            _this2._icon = view;
          }
        }, this.props));
      }
    }]);
    return Icon;
  }(_react.default.Component), _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = (0, _iconButton.default)(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {
    return glyphMap;
  }, _a.getFontFamily = function () {
    return fontName;
  }, _a.loadFont = function () {
    return Font.loadAsync(font);
  }, _a.font = font, _a;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,