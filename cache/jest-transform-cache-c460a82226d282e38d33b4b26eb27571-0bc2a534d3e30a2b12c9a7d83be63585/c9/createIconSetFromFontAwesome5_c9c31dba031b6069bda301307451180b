6e07c9352392599ccb8528c5b8abf208
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FA5Style = void 0;
exports.createFA5iconSet = createFA5iconSet;
var _reactNative = require("react-native");
var _createMultiStyleIconSet = _interopRequireDefault(require("./createMultiStyleIconSet"));
var FA5Style = {
  regular: 'regular',
  light: 'light',
  solid: 'solid',
  brand: 'brand'
};
exports.FA5Style = FA5Style;
function createFA5iconSet(glyphMap) {
  var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fonts = arguments.length > 2 ? arguments[2] : undefined;
  var pro = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var metadataKeys = Object.keys(metadata);
  var fontFamily = `FontAwesome5${pro ? 'Pro' : 'Free'}`;
  function fallbackFamily(glyph) {
    for (var i = 0; i < metadataKeys.length; i += 1) {
      var family = metadataKeys[i];
      if (metadata[family].indexOf(glyph) !== -1) {
        return family === 'brands' ? 'brand' : family;
      }
    }
    return 'regular';
  }
  function glyphValidator(glyph, style) {
    var family = style === 'brand' ? 'brands' : style;
    if (metadataKeys.indexOf(family) === -1) return false;
    return metadata[family].indexOf(glyph) !== -1;
  }
  function createFontAwesomeStyle(styleName, fontWeight) {
    var family = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : fontFamily;
    var fontFile = fonts[styleName];
    return {
      fontFamily: `${family}-${styleName}`,
      fontFile: fontFile,
      fontStyle: _reactNative.Platform.select({
        ios: {
          fontWeight: fontWeight
        },
        default: {}
      }),
      glyphMap: glyphMap
    };
  }
  var brandIcons = createFontAwesomeStyle('Brand', '400');
  var lightIcons = createFontAwesomeStyle('Light', '100');
  var regularIcons = createFontAwesomeStyle('Regular', '400');
  var solidIcons = createFontAwesomeStyle('Solid', '700');
  var Icon = (0, _createMultiStyleIconSet.default)({
    brand: brandIcons,
    light: lightIcons,
    regular: regularIcons,
    solid: solidIcons
  }, {
    defaultStyle: 'regular',
    fallbackFamily: fallbackFamily,
    glyphValidator: glyphValidator
  });
  return Icon;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2NyZWF0ZU11bHRpU3R5bGVJY29uU2V0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIkZBNVN0eWxlIiwicmVndWxhciIsImxpZ2h0Iiwic29saWQiLCJicmFuZCIsImV4cG9ydHMiLCJjcmVhdGVGQTVpY29uU2V0IiwiZ2x5cGhNYXAiLCJtZXRhZGF0YSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImZvbnRzIiwicHJvIiwibWV0YWRhdGFLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImZvbnRGYW1pbHkiLCJmYWxsYmFja0ZhbWlseSIsImdseXBoIiwiaSIsImZhbWlseSIsImluZGV4T2YiLCJnbHlwaFZhbGlkYXRvciIsInN0eWxlIiwiY3JlYXRlRm9udEF3ZXNvbWVTdHlsZSIsInN0eWxlTmFtZSIsImZvbnRXZWlnaHQiLCJmb250RmlsZSIsImZvbnRTdHlsZSIsIlBsYXRmb3JtIiwic2VsZWN0IiwiaW9zIiwiZGVmYXVsdCIsImJyYW5kSWNvbnMiLCJsaWdodEljb25zIiwicmVndWxhckljb25zIiwic29saWRJY29ucyIsIkljb24iLCJjcmVhdGVNdWx0aVN0eWxlSWNvblNldCIsImRlZmF1bHRTdHlsZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVJY29uU2V0RnJvbUZvbnRBd2Vzb21lNS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgY3JlYXRlTXVsdGlTdHlsZUljb25TZXQgZnJvbSAnLi9jcmVhdGVNdWx0aVN0eWxlSWNvblNldCc7XG5cbmV4cG9ydCBjb25zdCBGQTVTdHlsZSA9IHtcbiAgcmVndWxhcjogJ3JlZ3VsYXInLFxuICBsaWdodDogJ2xpZ2h0JyxcbiAgc29saWQ6ICdzb2xpZCcsXG4gIGJyYW5kOiAnYnJhbmQnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZBNWljb25TZXQoZ2x5cGhNYXAsIG1ldGFkYXRhID0ge30sIGZvbnRzLCBwcm8gPSBmYWxzZSkge1xuICBjb25zdCBtZXRhZGF0YUtleXMgPSBPYmplY3Qua2V5cyhtZXRhZGF0YSk7XG4gIGNvbnN0IGZvbnRGYW1pbHkgPSBgRm9udEF3ZXNvbWU1JHtwcm8gPyAnUHJvJyA6ICdGcmVlJ31gO1xuXG4gIGZ1bmN0aW9uIGZhbGxiYWNrRmFtaWx5KGdseXBoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhZGF0YUtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGZhbWlseSA9IG1ldGFkYXRhS2V5c1tpXTtcbiAgICAgIGlmIChtZXRhZGF0YVtmYW1pbHldLmluZGV4T2YoZ2x5cGgpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFtaWx5ID09PSAnYnJhbmRzJyA/ICdicmFuZCcgOiBmYW1pbHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICdyZWd1bGFyJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdseXBoVmFsaWRhdG9yKGdseXBoLCBzdHlsZSkge1xuICAgIGNvbnN0IGZhbWlseSA9IHN0eWxlID09PSAnYnJhbmQnID8gJ2JyYW5kcycgOiBzdHlsZTtcbiAgICBpZiAobWV0YWRhdGFLZXlzLmluZGV4T2YoZmFtaWx5KSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gbWV0YWRhdGFbZmFtaWx5XS5pbmRleE9mKGdseXBoKSAhPT0gLTE7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVGb250QXdlc29tZVN0eWxlKHN0eWxlTmFtZSwgZm9udFdlaWdodCwgZmFtaWx5ID0gZm9udEZhbWlseSkge1xuICAgIGxldCBmb250RmlsZSA9IGZvbnRzW3N0eWxlTmFtZV07XG5cbiAgICByZXR1cm4ge1xuICAgICAgZm9udEZhbWlseTogYCR7ZmFtaWx5fS0ke3N0eWxlTmFtZX1gLFxuICAgICAgZm9udEZpbGUsXG4gICAgICBmb250U3R5bGU6IFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGlvczoge1xuICAgICAgICAgIGZvbnRXZWlnaHQsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHt9LFxuICAgICAgfSksXG4gICAgICBnbHlwaE1hcCxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgYnJhbmRJY29ucyA9IGNyZWF0ZUZvbnRBd2Vzb21lU3R5bGUoJ0JyYW5kJywgJzQwMCcpO1xuICBjb25zdCBsaWdodEljb25zID0gY3JlYXRlRm9udEF3ZXNvbWVTdHlsZSgnTGlnaHQnLCAnMTAwJyk7XG4gIGNvbnN0IHJlZ3VsYXJJY29ucyA9IGNyZWF0ZUZvbnRBd2Vzb21lU3R5bGUoJ1JlZ3VsYXInLCAnNDAwJyk7XG4gIGNvbnN0IHNvbGlkSWNvbnMgPSBjcmVhdGVGb250QXdlc29tZVN0eWxlKCdTb2xpZCcsICc3MDAnKTtcbiAgY29uc3QgSWNvbiA9IGNyZWF0ZU11bHRpU3R5bGVJY29uU2V0KFxuICAgIHtcbiAgICAgIGJyYW5kOiBicmFuZEljb25zLFxuICAgICAgbGlnaHQ6IGxpZ2h0SWNvbnMsXG4gICAgICByZWd1bGFyOiByZWd1bGFySWNvbnMsXG4gICAgICBzb2xpZDogc29saWRJY29ucyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGRlZmF1bHRTdHlsZTogJ3JlZ3VsYXInLFxuICAgICAgZmFsbGJhY2tGYW1pbHksXG4gICAgICBnbHlwaFZhbGlkYXRvcixcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiBJY29uO1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsd0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUVPLElBQU1HLFFBQVEsR0FBRztFQUN0QkMsT0FBTyxFQUFFLFNBQVM7RUFDbEJDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLEtBQUssRUFBRTtDQUNSO0FBQUNDLE9BQUEsQ0FBQUwsUUFBQSxHQUFBQSxRQUFBO0FBRUksU0FBVU0sZ0JBQWdCQSxDQUFD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