d86e32db278bf0ae62500618899dc64f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../../Base"));
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
require("react-native-get-random-values");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _cartSlice = _interopRequireDefault(require("../../redux/reducer/cartSlice"));
var _jsxRuntime = require("react/jsx-runtime");
var store;
var screen;
var feature = (0, _jestCucumber.loadFeature)("Apps/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, function (test) {
  beforeEach(function () {
    store = (0, _toolkit.configureStore)({
      reducer: {
        cart: _cartSlice.default
      }
    });
    screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: store,
      children: (0, _jsxRuntime.jsx)(_Base.default, {})
    }));
  });
  test("Adding an item to the cart", function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Add to Cart" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var addItem = screen.getByTestId("add-new-item");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(addItem);
      });
    });
    then("the total quantity should increase by 1", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(6);
      });
    }));
  });
  test("Deleting an item from the cart", function (_ref3) {
    var given = _ref3.given,
      when = _ref3.when,
      then = _ref3.then,
      and = _ref3.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Delete" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var deleteItem = screen.getAllByTestId("delete-from-cart");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(deleteItem[4]);
      });
    });
    then("the total quantity should decrease by the quantity of the deleted item", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(4);
      });
    }));
  });
  test("Removing an item from the cart", function (_ref5) {
    var given = _ref5.given,
      when = _ref5.when,
      then = _ref5.then,
      and = _ref5.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Remove" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var removeItem = screen.getAllByTestId("decrease-quantity");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(removeItem[4]);
      });
    });
    then("the total quantity should decrease by 1", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(4);
      });
    }));
  });
  test("Resetting the cart counter", function (_ref7) {
    var given = _ref7.given,
      when = _ref7.when,
      then = _ref7.then,
      and = _ref7.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Reset Counter" button', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var resetCart = screen.getByTestId("reset-state");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(resetCart);
      });
    });
    then("the total quantity should be set to 0", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(0);
      });
    }));
  });
  test("Removing all items from the cart", function (_ref9) {
    var given = _ref9.given,
      when = _ref9.when,
      then = _ref9.then,
      and = _ref9.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Remove All Items" button', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var deleteCart = screen.getByTestId("remove-all-items");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(deleteCart);
      });
    });
    then("the cart should be empty", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        try {
          var itemsContainer = screen.getByTestId("items-container");
          expect(itemsContainer).toBeFalsy();
        } catch (error) {
          expect(error).toBeDefined();
        }
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQmFzZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2plc3RDdWN1bWJlciIsIl9yZWFjdFJlZHV4IiwiX3Rvb2xraXQiLCJfY2FydFNsaWNlIiwiX2pzeFJ1bnRpbWUiLCJzdG9yZSIsInNjcmVlbiIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiYmVmb3JlRWFjaCIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsImNhcnQiLCJjYXJ0U2xpY2UiLCJyZW5kZXIiLCJqc3giLCJQcm92aWRlciIsImNoaWxkcmVuIiwiZGVmYXVsdCIsIl9yZWYiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiYW5kIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJpdGVtUXVhbnRpdHkiLCJnZXRCeVRleHQiLCJ0b0JlVHJ1dGh5IiwiYWRkSXRlbSIsImdldEJ5VGVzdElkIiwiYWN0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJ3YWl0Rm9yIiwicHJvcHMiLCJ0b0JlIiwiX3JlZjMiLCJkZWxldGVJdGVtIiwiZ2V0QWxsQnlUZXN0SWQiLCJfcmVmNSIsInJlbW92ZUl0ZW0iLCJfcmVmNyIsInJlc2V0Q2FydCIsIl9yZWY5IiwiZGVsZXRlQ2FydCIsIml0ZW1zQ29udGFpbmVyIiwidG9CZUZhbHN5IiwiZXJyb3IiXSwic291cmNlcyI6WyJiYXNlLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZSBmcm9tIFwiLi4vLi4vQmFzZVwiO1xyXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciwgYWN0IH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IGxvYWRGZWF0dXJlLCBkZWZpbmVGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IFwicmVhY3QtbmF0aXZlLWdldC1yYW5kb20tdmFsdWVzXCI7XHJcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IGNhcnRTbGljZSBmcm9tIFwiLi4vLi4vcmVkdXgvcmVkdWNlci9jYXJ0U2xpY2VcIjtcclxubGV0IHN0b3JlOiBhbnk7XHJcbmxldCBzY3JlZW46IGFueTtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwiQXBwcy9mZWF0dXJlcy9iYXNlLmZlYXR1cmVcIik7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgICByZWR1Y2VyOiB7XHJcbiAgICAgICAgY2FydDogY2FydFNsaWNlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxCYXNlIC8+XHJcbiAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gIH0pO1xyXG4gIHRlc3QoXCJBZGRpbmcgYW4gaXRlbSB0byB0aGUgY2FydFwiLCAoeyBnaXZlbiwgd2hlbiwgdGhlbiwgYW5kIH0pID0+IHtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaXMgb24gdGhlIGNhcnQgcGFnZVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICB9KTtcclxuICAgIHdoZW4oJ3RoZSB1c2VyIGNsaWNrcyB0aGUgXCJBZGQgdG8gQ2FydFwiIGJ1dHRvbiBmb3IgYW4gaXRlbScsICgpID0+IHtcclxuICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEJ5VGV4dChcIjVcIik7XHJcbiAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHkpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgYWRkSXRlbSA9IHNjcmVlbi5nZXRCeVRlc3RJZChcImFkZC1uZXctaXRlbVwiKTtcclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MoYWRkSXRlbSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICB0aGVuKFwidGhlIHRvdGFsIHF1YW50aXR5IHNob3VsZCBpbmNyZWFzZSBieSAxXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEJ5VGVzdElkKFwidG90YWwtcXVhbnRpdHlcIik7XHJcbiAgICAgICAgZXhwZWN0KGl0ZW1RdWFudGl0eS5wcm9wcy5jaGlsZHJlbikudG9CZSg2KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICB0ZXN0KFwiRGVsZXRpbmcgYW4gaXRlbSBmcm9tIHRoZSBjYXJ0XCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgY2FydCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbigndGhlIHVzZXIgY2xpY2tzIHRoZSBcIkRlbGV0ZVwiIGJ1dHRvbiBmb3IgYW4gaXRlbScsICgpID0+IHtcclxuICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEJ5VGV4dChcIjVcIik7XHJcbiAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHkpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgZGVsZXRlSXRlbSA9IHNjcmVlbi5nZXRBbGxCeVRlc3RJZChcImRlbGV0ZS1mcm9tLWNhcnRcIik7XHJcbiAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGRlbGV0ZUl0ZW1bNF0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcclxuICAgICAgXCJ0aGUgdG90YWwgcXVhbnRpdHkgc2hvdWxkIGRlY3JlYXNlIGJ5IHRoZSBxdWFudGl0eSBvZiB0aGUgZGVsZXRlZCBpdGVtXCIsXHJcbiAgICAgIGFzeW5jICgpID0+IHtcclxuICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGl0ZW1RdWFudGl0eSA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInRvdGFsLXF1YW50aXR5XCIpO1xyXG4gICAgICAgICAgZXhwZWN0KGl0ZW1RdWFudGl0eS5wcm9wcy5jaGlsZHJlbikudG9CZSg0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9KTtcclxuICB0ZXN0KFwiUmVtb3ZpbmcgYW4gaXRlbSBmcm9tIHRoZSBjYXJ0XCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgY2FydCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbigndGhlIHVzZXIgY2xpY2tzIHRoZSBcIlJlbW92ZVwiIGJ1dHRvbiBmb3IgYW4gaXRlbScsICgpID0+IHtcclxuICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEJ5VGV4dChcIjVcIik7XHJcbiAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHkpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgcmVtb3ZlSXRlbSA9IHNjcmVlbi5nZXRBbGxCeVRlc3RJZChcImRlY3JlYXNlLXF1YW50aXR5XCIpO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhyZW1vdmVJdGVtWzRdKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHRoZW4oXCJ0aGUgdG90YWwgcXVhbnRpdHkgc2hvdWxkIGRlY3JlYXNlIGJ5IDFcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBjb25zdCBpdGVtUXVhbnRpdHkgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJ0b3RhbC1xdWFudGl0eVwiKTtcclxuICAgICAgICBleHBlY3QoaXRlbVF1YW50aXR5LnByb3BzLmNoaWxkcmVuKS50b0JlKDQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHRlc3QoXCJSZXNldHRpbmcgdGhlIGNhcnQgY291bnRlclwiLCAoeyBnaXZlbiwgd2hlbiwgdGhlbiwgYW5kIH0pID0+IHtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaXMgb24gdGhlIGNhcnQgcGFnZVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICB9KTtcclxuICAgIHdoZW4oJ3RoZSB1c2VyIGNsaWNrcyB0aGUgXCJSZXNldCBDb3VudGVyXCIgYnV0dG9uJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtUXVhbnRpdHkgPSBzY3JlZW4uZ2V0QnlUZXh0KFwiNVwiKTtcclxuICAgICAgZXhwZWN0KGl0ZW1RdWFudGl0eSkudG9CZVRydXRoeSgpO1xyXG4gICAgICBjb25zdCByZXNldENhcnQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJyZXNldC1zdGF0ZVwiKTtcclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MocmVzZXRDYXJ0KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHRoZW4oXCJ0aGUgdG90YWwgcXVhbnRpdHkgc2hvdWxkIGJlIHNldCB0byAwXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEJ5VGVzdElkKFwidG90YWwtcXVhbnRpdHlcIik7XHJcbiAgICAgICAgZXhwZWN0KGl0ZW1RdWFudGl0eS5wcm9wcy5jaGlsZHJlbikudG9CZSgwKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICB0ZXN0KFwiUmVtb3ZpbmcgYWxsIGl0ZW1zIGZyb20gdGhlIGNhcnRcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICBnaXZlbihcInRoZSB1c2VyIGlzIG9uIHRoZSBjYXJ0IHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCd0aGUgdXNlciBjbGlja3MgdGhlIFwiUmVtb3ZlIEFsbCBJdGVtc1wiIGJ1dHRvbicsICgpID0+IHtcclxuICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEJ5VGV4dChcIjVcIik7XHJcbiAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHkpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgZGVsZXRlQ2FydCA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInJlbW92ZS1hbGwtaXRlbXNcIik7XHJcbiAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGRlbGV0ZUNhcnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSBjYXJ0IHNob3VsZCBiZSBlbXB0eVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBpdGVtc0NvbnRhaW5lciA9IHNjcmVlbi5nZXRCeVRlc3RJZChcIml0ZW1zLWNvbnRhaW5lclwiKTtcclxuICAgICAgICAgIGV4cGVjdChpdGVtc0NvbnRhaW5lcikudG9CZUZhbHN5KCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGV4cGVjdChlcnJvcikudG9CZURlZmluZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsYUFBQSxHQUFBRixPQUFBO0FBQ0FBLE9BQUE7QUFFQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxVQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBc0QsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQ3RELElBQUlPLEtBQVU7QUFDZCxJQUFJQyxNQUFXO0FBQ2YsSUFBTUMsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMsNEJBQTRCLENBQUM7QUFDekQsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFFLFVBQUNHLElBQUksRUFBSztFQUMvQkMsVUFBVSxDQUFDLFlBQU07SUFDZk4sS0FBSyxHQUFHLElBQUFPLHVCQUFjLEVBQUM7TUFDckJDLE9BQU8sRUFBRTtRQUNQQyxJQUFJLEVBQUVDO01BQ1I7SUFDRixDQUFDLENBQUM7SUFDRlQsTUFBTSxHQUFHLElBQUFVLG1CQUFNLEVBQ2IsSUFBQVosV0FBQSxDQUFBYSxHQUFBLEVBQUNoQixXQUFBLENBQUFpQixRQUFRO01BQUNiLEtBQUssRUFBRUEsS0FBTTtNQUFBYyxRQUFBLEVBQ3JCLElBQUFmLFdBQUEsQ0FBQWEsR0FBQSxFQUFDckIsS0FBQSxDQUFBd0IsT0FBSSxJQUFFO0lBQUMsQ0FDQSxDQUNaLENBQUM7RUFDSCxDQUFDLENBQUM7RUFDRlYsSUFBSSxDQUFDLDRCQUE0QixFQUFFLFVBQUFXLElBQUEsRUFBZ0M7SUFBQSxJQUE3QkMsS0FBSyxHQUFBRCxJQUFB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