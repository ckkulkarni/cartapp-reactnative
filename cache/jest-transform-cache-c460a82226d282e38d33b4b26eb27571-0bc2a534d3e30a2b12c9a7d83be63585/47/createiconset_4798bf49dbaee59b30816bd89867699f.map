{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_ensureNativeModuleAvailable","_interopRequireDefault","_createIconSourceCache","_iconButton","_jsxRuntime","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","exports","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","Icon","_PureComponent","_inherits2","_super","_this","_classCallCheck2","_len","args","Array","_key","concat","root","handleRef","ref","_createClass2","value","setNativeProps","nativeProps","render","_this$props","props","name","size","color","style","children","_objectWithoutProperties2","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","jsxs","Text","selectable","PureComponent","defaultProps","allowFontScaling","imageSourceCache","createIconSourceCache","resolveGlyph","getImageSourceSync","undefined","ensureNativeModuleAvailable","processedColor","processColor","cacheKey","imagePath","getImageForFontSync","uri","scale","PixelRatio","setValue","error","setError","getImageSource","_x","_getImageSource","_asyncToGenerator2","getImageForFont","loadFont","_loadFont","file","OS","Error","loadFontWithFileName","_toConsumableArray2","split","hasIcon","getRawGlyphMap","getFontFamily","Button","createIconButtonComponent"],"sources":["create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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"}