{"version":3,"names":["_expoAsset","require","_expoConstants","_interopRequireDefault","_expoModulesCore","_reactNative","_ExpoFontLoader","isInClient","Constants","appOwnership","isInIOSStandalone","Platform","OS","fontFamilyNeedsScoping","name","systemFonts","includes","sessionId","getAssetForSource","source","Asset","fromURI","fromModule","uri","loadSingleFontAsync","_x","_x2","_loadSingleFontAsync","apply","arguments","_asyncToGenerator2","default","input","asset","downloadAsync","CodedError","downloaded","ExpoFontLoader","loadAsync","getNativeFontName","localUri"],"sources":["../src/FontLoader.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { CodedError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource } from './Font.types';\n\nconst isInClient = Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return (\n    (isInClient || isInIOSStandalone) &&\n    !Constants.systemFonts.includes(name) &&\n    name !== 'System' &&\n    !name.includes(Constants.sessionId)\n  );\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (typeof source === 'string') {\n    return Asset.fromURI(source);\n  } else if (typeof source === 'number') {\n    return Asset.fromModule(source);\n  } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {\n    return getAssetForSource(source.uri);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  const asset = input as Asset;\n  if (!asset.downloadAsync) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native'\n    );\n  }\n\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new CodedError(`ERR_DOWNLOAD`, `Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(getNativeFontName(name), asset.localUri);\n}\n\nexport function getNativeFontName(name: string): string {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}\n"],"mappings":";;;;;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,cAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,gBAAA,GAAAH,OAAA;AACA,IAAAI,YAAA,GAAAJ,OAAA;AAEA,IAAAK,eAAA,GAAAH,sBAAA,CAAAF,OAAA;AAGA,IAAMM,UAAU,GAAGC,sBAAS,CAACC,YAAY,KAAK,MAAM;AACpD,IAAMC,iBAAiB,GAAGF,sBAAS,CAACC,YAAY,KAAK,YAAY,IAAIE,qBAAQ,CAACC,EAAE,KAAK,KAAK;AAEpF,SAAUC,sBAAsBA,CAACC,IAAY;EACjD,OACE,CAACP,UAAU,IAAIG,iBAAiB,KAChC,CAACF,sBAAS,CAACO,WAAW,CAACC,QAAQ,CAACF,IAAI,CAAC,IACrCA,IAAI,KAAK,QAAQ,IACjB,CAACA,IAAI,CAACE,QAAQ,CAACR,sBAAS,CAACS,SAAS,CAAC;AAEvC;AAEM,SAAUC,iBAAiBA,CAACC,MAAkB;EAClD,IAAIA,MAAM,YAAYC,gBAAK,EAAE;IAC3B,OAAOD,MAAM;;EAGf,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOC,gBAAK,CAACC,OAAO,CAACF,MAAM,CAAC;GAC7B,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IACrC,OAAOC,gBAAK,CAACE,UAAU,CAACH,MAAM,CAAC;GAChC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,OAAOA,MAAM,CAACI,GAAG,KAAK,WAAW,EAAE;IAC1E,OAAOL,iBAAiB,CAACC,MAAM,CAACI,GAAG,CAAC;;EAMtC,OAAOJ,MAAM;AACf;AAAC,SAEqBK,mBAAmBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,qBAAA;EAAAA,oBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAlC,WACLjB,IAAY,EACZkB,KAA2B;IAE3B,IAAMC,KAAK,GAAGD,KAAc;IAC5B,IAAI,CAACC,KAAK,CAACC,aAAa,EAAE;MACxB,MAAM,IAAIC,2BAAU,CAClB,iBAAiB,EACjB,mFAAmF,CACpF;;IAGH,MAAMF,KAAK,CAACC,aAAa,EAAE;IAC3B,IAAI,CAACD,KAAK,CAACG,UAAU,EAAE;MACrB,MAAM,IAAID,2BAAU,CAAC,cAAc,EAAE,sCAAsCrB,IAAI,GAAG,CAAC;;IAErF,MAAMuB,uBAAc,CAACC,SAAS,CAACC,iBAAiB,CAACzB,IAAI,CAAC,EAAEmB,KAAK,CAACO,QAAQ,CAAC;EACzE,CAAC;EAAA,OAAAb,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEK,SAAUU,iBAAiBA,CAACzB,IAAY;EAC5C,IAAID,sBAAsB,CAACC,IAAI,CAAC,EAAE;IAChC,OAAO,GAAGN,sBAAS,CAACS,SAAS,IAAIH,IAAI,EAAE;GACxC,MAAM;IACL,OAAOA,IAAI;;AAEf"}