286258aa5d982fb8d0b818a35851ced3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../../Base"));
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
require("react-native-get-random-values");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _cartSlice = _interopRequireDefault(require("../../redux/reducer/cartSlice"));
var _jsxRuntime = require("react/jsx-runtime");
var store;
var screen;
var feature = (0, _jestCucumber.loadFeature)("Apps/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, function (test) {
  beforeEach(function () {
    store = (0, _toolkit.configureStore)({
      reducer: {
        cart: _cartSlice.default
      }
    });
    screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: store,
      children: (0, _jsxRuntime.jsx)(_Base.default, {})
    }));
  });
  test("Adding an item to the cart", function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Add to Cart" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var increaseQuantity = screen.getAllByTestId("increase-quantity");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(increaseQuantity[0]);
      });
    });
    then("the total quantity should increase by 1", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(6);
      });
    }));
  });
  test("Deleting an item from the cart", function (_ref3) {
    var given = _ref3.given,
      when = _ref3.when,
      then = _ref3.then,
      and = _ref3.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Delete" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var deleteItem = screen.getAllByTestId("delete-from-cart");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(deleteItem[4]);
      });
    });
    then("the total quantity should decrease by the quantity of the deleted item", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(4);
      });
    }));
  });
  test("Removing an item from the cart", function (_ref5) {
    var given = _ref5.given,
      when = _ref5.when,
      then = _ref5.then,
      and = _ref5.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Remove" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var removeItem = screen.getAllByTestId("decrease-quantity");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(removeItem[4]);
      });
    });
    then("the total quantity should decrease by 1", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(4);
      });
    }));
  });
  test("Resetting the cart counter", function (_ref7) {
    var given = _ref7.given,
      when = _ref7.when,
      then = _ref7.then,
      and = _ref7.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Reset Counter" button', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var resetCart = screen.getByTestId("reset-state");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(resetCart);
      });
    });
    then("the total quantity should be set to 0", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(0);
      });
    }));
  });
  test("Removing all items from the cart", function (_ref9) {
    var given = _ref9.given,
      when = _ref9.when,
      then = _ref9.then,
      and = _ref9.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Remove All Items" button', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var deleteCart = screen.getByTestId("remove-all-items");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(deleteCart);
      });
    });
    then("the cart should be empty", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        try {
          var itemsContainer = screen.getByTestId("items-container");
          expect(itemsContainer).toBeFalsy();
        } catch (error) {
          expect(error).toBeDefined();
        }
      });
    }));
  });
  test("Adding a new item to the cart", function (_ref11) {
    var given = _ref11.given,
      when = _ref11.when,
      then = _ref11.then,
      and = _ref11.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Add New Item" button', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var addItem = screen.getByTestId("add-new-item");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(addItem);
      });
    });
    then("a new item should be added to the cart", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(6);
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,