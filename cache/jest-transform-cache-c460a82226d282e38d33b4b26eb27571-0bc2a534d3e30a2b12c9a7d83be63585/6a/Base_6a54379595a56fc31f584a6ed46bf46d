6d4fc10a08f924bbe85120f432d62893
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Base;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _cartSlice = require("./redux/reducer/cartSlice");
var _reactRedux = require("react-redux");
var _vectorIcons = require("@expo/vector-icons");
var _jsxRuntime = require("react/jsx-runtime");
function Base() {
  var dispatch = (0, _reactRedux.useDispatch)();
  var cartItems = (0, _reactRedux.useSelector)(function (state) {
    return state.cart.items;
  });
  var totalQuantity = (0, _reactRedux.useSelector)(function (state) {
    return state.cart.totalQuantity;
  });
  var handleAddItem = function handleAddItem(itemId) {
    dispatch((0, _cartSlice.increaseQuantity)(itemId));
  };
  var handleRemoveItem = function handleRemoveItem(itemId) {
    dispatch((0, _cartSlice.decreaseQuantity)(itemId));
  };
  var handleDeleteItem = function handleDeleteItem(itemId) {
    dispatch((0, _cartSlice.deleteItem)(itemId));
  };
  var handleResetCounter = function handleResetCounter() {
    dispatch((0, _cartSlice.resetCounter)());
  };
  var handleRemoveAllItems = function handleRemoveAllItems() {
    dispatch((0, _cartSlice.removeAllItems)());
  };
  var handleAddNewItem = function handleAddNewItem() {
    dispatch((0, _cartSlice.addNewItem)());
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        flexDirection: "row",
        alignItems: "center",
        gap: 16
      },
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "cart-outline",
        size: 32
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          backgroundColor: "#17A2B8",
          width: 50,
          textAlign: "center",
          padding: 4,
          borderRadius: 3,
          color: "white",
          fontSize: 16
        },
        testID: "total-quantity",
        children: totalQuantity
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "Items"
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        flexDirection: "row",
        alignItems: "center",
        marginTop: 8,
        gap: 8
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleResetCounter,
        style: {
          backgroundColor: "#28A745",
          padding: 8,
          borderRadius: 4
        },
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "refresh-circle",
          size: 30,
          color: "white"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleRemoveAllItems,
        style: {
          backgroundColor: "#4EA5FB",
          padding: 8,
          borderRadius: 4,
          marginLeft: 8
        },
        children: (0, _jsxRuntime.jsx)(_vectorIcons.FontAwesome5, {
          name: "recycle",
          size: 30,
          color: "white"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleAddNewItem,
        style: {
          backgroundColor: "#FFC107",
          padding: 8,
          borderRadius: 4,
          marginLeft: 8
        },
        testID: "add-new-item",
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "add-circle-outline",
          size: 30,
          color: "white"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        marginTop: 16
      },
      children: cartItems.map(function (item) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            flexDirection: "row",
            alignItems: "center",
            marginBottom: 8
          },
          testID: "items-container",
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: {
              marginTop: 4,
              marginRight: 8,
              backgroundColor: item.quantity === 0 ? "#FFC107" : "#007BFF",
              width: 70,
              height: 45,
              borderRadius: 2,
              justifyContent: "center",
              alignItems: "center"
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                color: "white"
              },
              children: item.quantity === 0 ? "Zero" : item.quantity
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: {
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
              marginLeft: 8,
              gap: 16
            },
            children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                return handleAddItem(item.id);
              },
              style: {
                backgroundColor: "#6C757D",
                padding: 8,
                borderRadius: 4
              },
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "add-outline",
                size: 30,
                color: "white"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                return handleRemoveItem(item.id);
              },
              style: {
                backgroundColor: "#17A2B8",
                padding: 8,
                borderRadius: 4,
                marginLeft: 8
              },
              testID: "decrease-quantity",
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "remove-outline",
                size: 30,
                color: "white"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                return handleDeleteItem(item.id);
              },
              style: {
                backgroundColor: "#DC3545",
                padding: 8,
                borderRadius: 4,
                marginLeft: 8
              },
              testID: "delete-from-cart",
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "trash-outline",
                size: 30,
                color: "white"
              })
            })]
          })]
        }, item.id);
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 16,
    backgroundColor: "#DDF2F5",
    borderRadius: 8,
    gap: 10
  },
  definitionContainer: {
    backgroundColor: "#E48586",
    borderRadius: 10,
    padding: 20,
    marginBottom: 20,
    width: "100%",
    alignItems: "center"
  },
  definitionTitle: {
    fontWeight: "bold",
    fontSize: 18,
    marginBottom: 10
  },
  definitionScrollView: {
    maxHeight: 200
  },
  definitionText: {
    fontSize: 16,
    marginBottom: 8
  },
  inputContainer: {
    width: "100%",
    alignItems: "center"
  },
  input: {
    borderWidth: 1,
    borderColor: "gray",
    borderRadius: 5,
    padding: 10,
    width: "80%",
    marginVertical: 10,
    color: "black"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,