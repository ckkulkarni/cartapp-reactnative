7001e9fad21d97cef47ce4379c967606
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../../Base"));
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
require("react-native-get-random-values");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _cartSlice = _interopRequireDefault(require("../../redux/reducer/cartSlice"));
var _jsxRuntime = require("react/jsx-runtime");
var store;
var screen;
var feature = (0, _jestCucumber.loadFeature)("Apps/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, function (test) {
  beforeEach(function () {
    store = (0, _toolkit.configureStore)({
      reducer: {
        cart: _cartSlice.default
      }
    });
    screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: store,
      children: (0, _jsxRuntime.jsx)(_Base.default, {})
    }));
  });
  test("Adding an item to the cart", function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Add to Cart" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var addItem = screen.getByTestId("add-new-item");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(addItem);
      });
    });
    then("the total quantity should increase by 1", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(6);
      });
    }));
  });
  test("Deleting an item from the cart", function (_ref3) {
    var given = _ref3.given,
      when = _ref3.when,
      then = _ref3.then,
      and = _ref3.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Delete" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var deleteItem = screen.getAllByTestId("delete-from-cart");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(deleteItem[4]);
      });
    });
    then("the total quantity should decrease by the quantity of the deleted item", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(4);
      });
    }));
  });
  test("Removing an item from the cart", function (_ref5) {
    var given = _ref5.given,
      when = _ref5.when,
      then = _ref5.then,
      and = _ref5.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Remove" button for an item', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var removeItem = screen.getAllByTestId("decrease-quantity");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(removeItem[4]);
      });
    });
    then("the total quantity should decrease by 1", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(4);
      });
    }));
  });
  test("Resetting the cart counter", function (_ref7) {
    var given = _ref7.given,
      when = _ref7.when,
      then = _ref7.then,
      and = _ref7.and;
    given("the user is on the cart page", function () {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Reset Counter" button', function () {
      var itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      var resetCart = screen.getByTestId("reset-state");
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(resetCart);
      });
    });
    then("the total quantity should be set to 0", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var itemQuantity = screen.getByTestId("total-quantity");
        expect(itemQuantity.props.children).toBe(0);
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQmFzZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2plc3RDdWN1bWJlciIsIl9yZWFjdFJlZHV4IiwiX3Rvb2xraXQiLCJfY2FydFNsaWNlIiwiX2pzeFJ1bnRpbWUiLCJzdG9yZSIsInNjcmVlbiIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiYmVmb3JlRWFjaCIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsImNhcnQiLCJjYXJ0U2xpY2UiLCJyZW5kZXIiLCJqc3giLCJQcm92aWRlciIsImNoaWxkcmVuIiwiZGVmYXVsdCIsIl9yZWYiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiYW5kIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJpdGVtUXVhbnRpdHkiLCJnZXRCeVRleHQiLCJ0b0JlVHJ1dGh5IiwiYWRkSXRlbSIsImdldEJ5VGVzdElkIiwiYWN0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJ3YWl0Rm9yIiwicHJvcHMiLCJ0b0JlIiwiX3JlZjMiLCJkZWxldGVJdGVtIiwiZ2V0QWxsQnlUZXN0SWQiLCJfcmVmNSIsInJlbW92ZUl0ZW0iLCJfcmVmNyIsInJlc2V0Q2FydCJdLCJzb3VyY2VzIjpbImJhc2Uuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlIGZyb20gXCIuLi8uLi9CYXNlXCI7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yLCBhY3QgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgbG9hZEZlYXR1cmUsIGRlZmluZUZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgXCJyZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXNcIjtcclxuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcclxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xyXG5pbXBvcnQgY2FydFNsaWNlIGZyb20gXCIuLi8uLi9yZWR1eC9yZWR1Y2VyL2NhcnRTbGljZVwiO1xyXG5sZXQgc3RvcmU6IGFueTtcclxubGV0IHNjcmVlbjogYW55O1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJBcHBzL2ZlYXR1cmVzL2Jhc2UuZmVhdHVyZVwiKTtcclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBjYXJ0OiBjYXJ0U2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPEJhc2UgLz5cclxuICAgICAgPC9Qcm92aWRlcj5cclxuICAgICk7XHJcbiAgfSk7XHJcbiAgdGVzdChcIkFkZGluZyBhbiBpdGVtIHRvIHRoZSBjYXJ0XCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgY2FydCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbigndGhlIHVzZXIgY2xpY2tzIHRoZSBcIkFkZCB0byBDYXJ0XCIgYnV0dG9uIGZvciBhbiBpdGVtJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtUXVhbnRpdHkgPSBzY3JlZW4uZ2V0QnlUZXh0KFwiNVwiKTtcclxuICAgICAgZXhwZWN0KGl0ZW1RdWFudGl0eSkudG9CZVRydXRoeSgpO1xyXG4gICAgICBjb25zdCBhZGRJdGVtID0gc2NyZWVuLmdldEJ5VGVzdElkKFwiYWRkLW5ldy1pdGVtXCIpO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhhZGRJdGVtKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHRoZW4oXCJ0aGUgdG90YWwgcXVhbnRpdHkgc2hvdWxkIGluY3JlYXNlIGJ5IDFcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBjb25zdCBpdGVtUXVhbnRpdHkgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJ0b3RhbC1xdWFudGl0eVwiKTtcclxuICAgICAgICBleHBlY3QoaXRlbVF1YW50aXR5LnByb3BzLmNoaWxkcmVuKS50b0JlKDYpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHRlc3QoXCJEZWxldGluZyBhbiBpdGVtIGZyb20gdGhlIGNhcnRcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICBnaXZlbihcInRoZSB1c2VyIGlzIG9uIHRoZSBjYXJ0IHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCd0aGUgdXNlciBjbGlja3MgdGhlIFwiRGVsZXRlXCIgYnV0dG9uIGZvciBhbiBpdGVtJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtUXVhbnRpdHkgPSBzY3JlZW4uZ2V0QnlUZXh0KFwiNVwiKTtcclxuICAgICAgZXhwZWN0KGl0ZW1RdWFudGl0eSkudG9CZVRydXRoeSgpO1xyXG4gICAgICBjb25zdCBkZWxldGVJdGVtID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKFwiZGVsZXRlLWZyb20tY2FydFwiKTtcclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZGVsZXRlSXRlbVs0XSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICB0aGVuKFxyXG4gICAgICBcInRoZSB0b3RhbCBxdWFudGl0eSBzaG91bGQgZGVjcmVhc2UgYnkgdGhlIHF1YW50aXR5IG9mIHRoZSBkZWxldGVkIGl0ZW1cIixcclxuICAgICAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEJ5VGVzdElkKFwidG90YWwtcXVhbnRpdHlcIik7XHJcbiAgICAgICAgICBleHBlY3QoaXRlbVF1YW50aXR5LnByb3BzLmNoaWxkcmVuKS50b0JlKDQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pO1xyXG4gIHRlc3QoXCJSZW1vdmluZyBhbiBpdGVtIGZyb20gdGhlIGNhcnRcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICBnaXZlbihcInRoZSB1c2VyIGlzIG9uIHRoZSBjYXJ0IHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCd0aGUgdXNlciBjbGlja3MgdGhlIFwiUmVtb3ZlXCIgYnV0dG9uIGZvciBhbiBpdGVtJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtUXVhbnRpdHkgPSBzY3JlZW4uZ2V0QnlUZXh0KFwiNVwiKTtcclxuICAgICAgZXhwZWN0KGl0ZW1RdWFudGl0eSkudG9CZVRydXRoeSgpO1xyXG4gICAgICBjb25zdCByZW1vdmVJdGVtID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKFwiZGVjcmVhc2UtcXVhbnRpdHlcIik7XHJcbiAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKHJlbW92ZUl0ZW1bNF0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSB0b3RhbCBxdWFudGl0eSBzaG91bGQgZGVjcmVhc2UgYnkgMVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1RdWFudGl0eSA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInRvdGFsLXF1YW50aXR5XCIpO1xyXG4gICAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHkucHJvcHMuY2hpbGRyZW4pLnRvQmUoNCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgdGVzdChcIlJlc2V0dGluZyB0aGUgY2FydCBjb3VudGVyXCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgY2FydCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbigndGhlIHVzZXIgY2xpY2tzIHRoZSBcIlJlc2V0IENvdW50ZXJcIiBidXR0b24nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGl0ZW1RdWFudGl0eSA9IHNjcmVlbi5nZXRCeVRleHQoXCI1XCIpO1xyXG4gICAgICBleHBlY3QoaXRlbVF1YW50aXR5KS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgIGNvbnN0IHJlc2V0Q2FydCA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInJlc2V0LXN0YXRlXCIpO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhyZXNldENhcnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSB0b3RhbCBxdWFudGl0eSBzaG91bGQgYmUgc2V0IHRvIDBcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBjb25zdCBpdGVtUXVhbnRpdHkgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJ0b3RhbC1xdWFudGl0eVwiKTtcclxuICAgICAgICBleHBlY3QoaXRlbVF1YW50aXR5LnByb3BzLmNoaWxkcmVuKS50b0JlKDApO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUNBQSxPQUFBO0FBRUEsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksUUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssVUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQXNELElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUN0RCxJQUFJTyxLQUFVO0FBQ2QsSUFBSUMsTUFBVztBQUNmLElBQU1DLE9BQU8sR0FBRyxJQUFBQyx5QkFBVyxFQUFDLDRCQUE0QixDQUFDO0FBQ3pELElBQUFDLDJCQUFhLEVBQUNGLE9BQU8sRUFBRSxVQUFDRyxJQUFJLEVBQUs7RUFDL0JDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZOLEtBQUssR0FBRyxJQUFBTyx1QkFBYyxFQUFDO01BQ3JCQyxPQUFPLEVBQUU7UUFDUEMsSUFBSSxFQUFFQztNQUNSO0lBQ0YsQ0FBQyxDQUFDO0lBQ0ZULE1BQU0sR0FBRyxJQUFBVSxtQkFBTSxFQUNiLElBQUFaLFdBQUEsQ0FBQWEsR0FBQSxFQUFDaEIsV0FBQSxDQUFBaUIsUUFBUTtNQUFDYixLQUFLLEVBQUVBLEtBQU07TUFBQWMsUUFBQSxFQUNyQixJQUFBZixXQUFBLENBQUFhLEdBQUEsRUFBQ3JCLEtBQUEsQ0FBQXdCLE9BQUksSUFBRTtJQUFDLENBQ0EsQ0FDWixDQUFDO0VBQ0gsQ0FBQyxDQUFDO0VBQ0ZWLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxVQUFBVyxJQUFBLEVBQWdDO0lBQUEsSUFBN0JDLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO01BQUVD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